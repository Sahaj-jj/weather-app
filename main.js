(()=>{"use strict";const e=async e=>{const t=await fetch((n=e,`https://api.openweathermap.org/data/2.5/weather?q=${n}&appid=0b94a86a7ab72879839de5a724686c9f`),{mode:"cors"});var n;if(!t.ok)throw new Error(t.status);return t.json()},t=(e,t)=>"C"===t?1.8*e+32:5/9*(e-32),n=(()=>{const n={};return{getForecast:()=>n,loadContents:async t=>{n.unit="C",n.city=t;try{const o=await e(t);return n.temp=o.main.temp-273.15,n.feelsLike=o.main.feels_like-273.15,n.humidity=o.main.humidity,n.icon=o.weather[0].icon,n.main=o.weather[0].main,n.country=o.sys.country,n.time=((e,t)=>{const n=new Date(1e3*e+1e3*t);return n.setHours(n.getHours()-5),n.setMinutes(n.getMinutes()-30),n.toLocaleTimeString()})(o.dt,o.timezone),n.tempMax=o.main.temp_max-273.15,n.tempMin=o.main.temp_min-273.15,n.humidity=o.main.humidity,n.windSpeed=o.wind.speed,!0}catch(e){return!1}},toggleUnit:()=>(n.temp=t(n.temp,n.unit),n.feelsLike=t(n.feelsLike,n.unit),n.tempMax=t(n.tempMax,n.unit),n.tempMin=t(n.tempMin,n.unit),n.unit="C"===n.unit?"F":"C",n.unit)}})();(()=>{const e=document.querySelector("input.city"),t=document.querySelector(".search-city"),o=document.querySelector(".main"),i=document.querySelector("body"),r=document.querySelector(".temperature"),c=document.querySelector(".feels-like-temp"),u=document.querySelector(".unit-selector"),a=document.querySelector(".weather-icon"),m=document.querySelector(".weather-main"),s=document.querySelector(".location-info > .city"),d=document.querySelector(".country"),l=document.querySelector(".time"),y=document.querySelector(".temp-max > .content"),p=document.querySelector(".temp-min > .content"),h=document.querySelector(".humidity > .content"),C=document.querySelector(".wind > .content"),w=e=>{e?(i.style.pointerEvents="none",o.classList.remove("loaded")):(o.classList.add("loaded"),i.style.pointerEvents="auto")},S=()=>{const e=n.getForecast();r.textContent=`${Math.round(e.temp)}`,c.textContent=`${Math.round(e.feelsLike)}째`,u.textContent=`째${e.unit}`,y.textContent=`${Math.round(e.tempMax)}째`,p.textContent=`${Math.round(e.tempMin)}째`},x=async()=>{const t=(()=>{let t=e.value.toLowerCase();return t=t[0].toUpperCase()+t.slice(1),e.value="",t})();w(!0);const o=await n.loadContents(t);w(!1),o?(()=>{S();const e=n.getForecast();(e=>{const t=document.createElement("img");t.src=`http://openweathermap.org/img/wn/${e.icon}@4x.png`,a.childElementCount&&a.lastChild.remove(),a.appendChild(t)})(e),(e=>{m.textContent=e.main,s.textContent=`${e.city} ${e.country}`,d.textContent=e.country,l.textContent=e.time})(e),(e=>{h.textContent=`${e.humidity}%`,C.textContent=`${e.windSpeed} m/s`})(e)})():console.log("Location not found")},q=()=>{n.toggleUnit(),S()};return{init:()=>{e.value="London",x(),t.addEventListener("click",x),e.addEventListener("keyup",(({key:e})=>{"Enter"===e&&x()})),u.addEventListener("click",q)}}})().init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,